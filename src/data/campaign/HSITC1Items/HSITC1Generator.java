package data.campaign.HSITC1Items;

import java.util.Random;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.CustomCampaignEntityAPI;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.SectorEntityToken;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.campaign.econ.MarketAPI;
import com.fs.starfarer.api.impl.campaign.DerelictShipEntityPlugin;
import com.fs.starfarer.api.impl.campaign.DerelictShipEntityPlugin.DerelictShipData;
import com.fs.starfarer.api.impl.campaign.ids.Conditions;
import com.fs.starfarer.api.impl.campaign.ids.Entities;
import com.fs.starfarer.api.impl.campaign.ids.Factions;
import com.fs.starfarer.api.impl.campaign.ids.Tags;
import com.fs.starfarer.api.impl.campaign.procgen.themes.BaseThemeGenerator;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.ShipRecoverySpecial.PerShipData;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.ShipRecoverySpecial.ShipCondition;
import com.fs.starfarer.api.util.Misc;
import com.fs.starfarer.api.util.WeightedRandomPicker;

public class HSITC1Generator {
    public static final String HSI_TC1_KNIGHT = "$HSI_TC1_Knight_ref";
    public static final String HSI_TC1_PLANET = "$HSI_TC1_Planet_ref";

    public static void generate() {
        Random random = new Random();
        PlanetAPI bestHab = null;
        PlanetAPI bestNonHab = null;
        // OrbitGap gapHab = null;
        // OrbitGap gapNonHab = null;
        float habDist = 0;
        float nonHabDist = 0;

        // looking for a habitable planet furthest from the Sector's center, with a bit
        // of
        // a random factor
        WeightedRandomPicker<StarSystemAPI> systems = new WeightedRandomPicker<>();
        for (StarSystemAPI system : Global.getSector().getStarSystems()) {
            if (system.hasTag(Tags.THEME_SPECIAL))
                continue;

            if (!system.hasTag(Tags.THEME_MISC_SKIP) &&
                    !system.hasTag(Tags.THEME_MISC)) {
                continue;
            }
            float dist = system.getLocation().length();
            if(!system.getStar().isNormalStar()) continue;
            if(dist>8000f){
                systems.add(system);
            }
        }

        StarSystemAPI systemPick = systems.pick();

        if(systemPick==null){
            for (StarSystemAPI system : Global.getSector().getStarSystems()) {
                if (system.hasTag(Tags.THEME_SPECIAL))
                    continue;

                if (!system.hasTag(Tags.THEME_MISC_SKIP) &&
                        !system.hasTag(Tags.THEME_MISC)) {
                    continue;
                }

                if(system.getStar()==null) continue;

                if(!system.getStar().isNormalStar()) continue;


                float dist = system.getLocation().length();
                if(!system.getStar().isNormalStar()) continue;
                if(dist>4000f){
                    systems.add(system);
                }
            }
        }

        systemPick = systems.pick();
        if(systemPick == null) return;
        PlanetAPI planet = systemPick.addPlanet("HSI_Perureino", // Unique id for this planet (or null to
                // have it be autogenerated)
                systemPick.getStar(), // What the planet orbits (orbit is always circular)
                "Perureino", // Name
                "water", // Planet type id in planets.json
                0, // Starting angle in orbit, i.e. 0 = to the right of the star
                200, // Planet radius, pixels at default zoom
                6000, // Orbit radius, pixels at default zoom
                250);// Days it takes to complete an orbit. 1 day = 10 seconds.;
        planet.addTag("HSI_Perureino");
        planet.getMarket().addCondition("water");
        planet.getMarket().addCondition("mild_climate");
        planet.getMarket().setPlanetConditionMarketOnly(true);
        Misc.makeImportant(planet,"HSI_Skye");
        {
            Global.getSector().getMemoryWithoutUpdate().set(HSI_TC1_PLANET, planet);
            PerShipData ship = new PerShipData("invictus_hull", ShipCondition.WRECKED, 0.5f);
            DerelictShipData params = new DerelictShipData(ship, true);
            CustomCampaignEntityAPI Knight = (CustomCampaignEntityAPI) BaseThemeGenerator.addSalvageEntity(
                    random, planet.getContainingLocation(), Entities.WRECK, Factions.NEUTRAL, params);
            // SalvageSpecialAssigner.assignSpecials(ship, false, data.random);
            // ship.addTag(Tags.EXPIRES);
            Global.getSector().getMemoryWithoutUpdate().set(HSI_TC1_KNIGHT, Knight);
            Knight.setDiscoverable(true);
            float orbitRadius = 200f + random.nextFloat() * 100f;
            float orbitDays = orbitRadius / (10f + random.nextFloat() * 5f);
            Knight.setCircularOrbit(planet, random.nextFloat() * 360f, orbitRadius, orbitDays);
            Knight.getMemoryWithoutUpdate().set("$HSI_TC1_MeetTheKnight", true);
            Misc.makeImportant(Knight, "HSI_TC1_MeetTheKnight");

            int numShips = random.nextInt(12) + 3;

            WeightedRandomPicker<Float> bands = new WeightedRandomPicker<Float>(random);
            for (int i = 0; i < numShips + 5; i++) {
                bands.add(140f + i * 20f, (i + 1) * (i + 1));
            }

            // WeightedRandomPicker<String> factions = new
            // WeightedRandomPicker<String>(random);
            // factions.add(Factions.TRITACHYON, 10f);
            // factions.add(Factions.HEGEMONY, 7f);
            // factions.add(Factions.INDEPENDENT, 3f);

            for (int i = 0; i < numShips; i++) {
                float radius = bands.pickAndRemove();

                DerelictShipData param = DerelictShipEntityPlugin.createRandom(Factions.LUDDIC_CHURCH, null, random,
                        DerelictShipEntityPlugin.getDefaultSModProb());
                if (param != null) {
                    CustomCampaignEntityAPI entity = (CustomCampaignEntityAPI) BaseThemeGenerator.addSalvageEntity(
                            random,
                            Knight.getContainingLocation(),
                            Entities.WRECK, Factions.NEUTRAL, param);
                    entity.setDiscoverable(true);
                    float orbitDay = radius / (5f + random.nextFloat() * 10f);
                    entity.setCircularOrbit(Knight, random.nextFloat() * 360f, radius, orbitDay);
                }
            }

        }
    }

    public static PlanetAPI getPlanet(){
        if(Global.getSector().getMemoryWithoutUpdate().contains(HSI_TC1_PLANET)){
            return (PlanetAPI)Global.getSector().getMemoryWithoutUpdate().get(HSI_TC1_PLANET);
        }else{
            generate();
            if(Global.getSector().getMemoryWithoutUpdate().contains(HSI_TC1_PLANET)){
                return (PlanetAPI)Global.getSector().getMemoryWithoutUpdate().get(HSI_TC1_PLANET);
            }
        }
        return null;
    }

    public static SectorEntityToken getKnight(){
        if(Global.getSector().getMemoryWithoutUpdate().contains(HSI_TC1_KNIGHT)){
            return (PlanetAPI)Global.getSector().getMemoryWithoutUpdate().get(HSI_TC1_KNIGHT);
        }
        return null;
    }
}
